name: CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:
    runs-on: windows-latest
    if: github.ref == 'refs/heads/master'   
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101
    
    #Build and test service   
    - name: Variable Substitution appsettings file for tests
      uses: microsoft/variable-substitution@v1
      with:
        files: 'DevOpsMetrics/DevOpsMetrics.Tests/appsettings.json'
      env:
        AppSettings.AzureDevOpsPatToken: "${{ secrets.AzureDevOpsPATToken }}"
        AppSettings.GitHubClientId: "${{ secrets.GitHubClientId }}" 
        AppSettings.GitHubClientSecret: "${{ secrets.GitHubClientSecret }}" 
        AppSettings.AzureStorageAccountAccessKey: "${{ secrets.AzureStorageAccessKey }}" 
    - name: view appsettings file after substitution
      run: Get-Content -Path "DevOpsMetrics/DevOpsMetrics.Tests/appsettings.json"
    - name: Run automated unit and integration tests
      run: dotnet test DevOpsMetrics/DevOpsMetrics.Tests/DevOpsMetrics.Tests.csproj --configuration Release --logger trx --collect "Code coverage" --settings:./DevOpsMetrics/DevOpsMetrics.Tests/CodeCoverage.runsettings --  

    #Publish dotnet objects
    - name: .NET Publish Web Service
      run: dotnet publish DevOpsMetrics/DevOpsMetrics.Service/DevOpsMetrics.Service.csproj --configuration Release
    - name: .NET Publish Website
      run: dotnet publish DevOpsMetrics/DevOpsMetrics.Web/DevOpsMetrics.Web.csproj --configuration Release
    - name: .NET Publish Function
      run: dotnet publish DevOpsMetrics/DevOpsMetrics.Function/DevOpsMetrics.Function.csproj --configuration Release      

    #Publish build artifacts to GitHub
    - name: Upload web service build artifacts back to GitHub
      uses: actions/upload-artifact@master
      with:
        name: serviceapp
        path: DevOpsMetrics/DevOpsMetrics.Service/bin/Release/netcoreapp3.1/publish
    - name: Upload website build artifacts back to GitHub
      uses: actions/upload-artifact@master
      with:
        name: webapp
        path: DevOpsMetrics/DevOpsMetrics.Web/bin/Release/netcoreapp3.1/publish
    - name: Upload function build artifacts back to GitHub
      uses: actions/upload-artifact@master
      with:
        name: functionapp
        path: DevOpsMetrics/DevOpsMetrics.Function/bin/Release/netcoreapp3.1/publish

  #Deploy the artifacts to Azure
  deploy:
    runs-on: windows-latest
    needs: build    
    if: github.ref == 'refs/heads/master'    
    steps:        
    # Login with the secret SP details
    - name: Log into Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_SP }}  
    
    #Download the artifacts from GitHub
    - name: Download serviceapp artifact
      uses: actions/download-artifact@v1.0.0
      with:
        name: serviceapp 
    - name: Download webapp artifact
      uses: actions/download-artifact@v1.0.0
      with:
        name: webapp 
    - name: Download webapp artifact
      uses: actions/download-artifact@v1.0.0
      with:
        name: functionapp
    
    #Deploy service, website, and function to Azure
    - name: Deploy web service to Azure WebApp
      uses: Azure/webapps-deploy@v1
      with:
        app-name: devopsmetrics-prod-eu-service
        package: serviceapp  
    - run: az webapp config appsettings set --name "devopsmetrics-prod-eu-service" --resource-group "devopsmetrics" --settings "AppSettings:AzureDevOpsPatToken=${{ secrets.AzureDevOpsPATToken }}" "AppSettings:GitHubClientId=${{ secrets.GitHubClientId }}" "AppSettings:GitHubClientSecret=${{ secrets.GitHubClientSecret }}" "AppSettings:AzureStorageAccountAccessKey=${{ secrets.AzureStorageAccessKey }}" 
    - name: Deploy website to Azure WebApp
      uses: Azure/webapps-deploy@v1
      with:
        app-name: devopsmetrics-prod-eu-web
        package: webapp 
    - run: az webapp config appsettings set --name devopsmetrics-prod-eu-web --resource-group "devopsmetrics" --settings "AppSettings:AzureDevOpsPatToken=${{ secrets.AzureDevOpsPATToken }}" "AppSettings:GitHubClientId=${{ secrets.GitHubClientId }}" "AppSettings:GitHubClientSecret=${{ secrets.GitHubClientSecret }}"  
    - name: Deploy function to Azure WebApp
      uses: Azure/webapps-deploy@v1
      with:
        app-name: devopsmetrics-prod-eu-function
        package: functionapp 
    - run: az webapp config appsettings set --name "devopsmetrics-prod-eu-function" --resource-group "devopsmetrics" --settings "AppSettings:AzureDevOpsPatToken=${{ secrets.AzureDevOpsPATToken }}" "AppSettings:GitHubClientId=${{ secrets.GitHubClientId }}" "AppSettings:GitHubClientSecret=${{ secrets.GitHubClientSecret }}" "AppSettings:AzureStorageAccountAccessKey=${{ secrets.AzureStorageAccessKey }}" "AppSettings:WebServiceURL=https://devopsmetrics-prod-eu-service.azurewebsites.net/" 


  #Publish the Azure DevOps extension 
  publishAzureDevOpsExtension:
    runs-on: windows-latest
    #needs: build   
    env:
      extensionVersion: "0.0.0" 
    #if: github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101
    - name: .NET core Publish Azure DevOps Extension
      run: dotnet publish DevOpsMetrics/DevOpsMetrics.AzureDevOpsExtension/DevOpsMetrics.AzureDevOpsExtension.csproj --configuration Release   
    - name: Update manifest file with unique version
      run: |
        #Get the current version
        $pathToJson = "DevOpsMetrics\DevOpsMetrics.AzureDevOpsExtension\bin\Release\netcoreapp3.1\publish\wwwroot\vss-extension.json"
        $a = Get-Content $pathToJson -raw | ConvertFrom-Json
        Write-Host "old version: " $a.version
        $splitVersion = $a.version -Split "\." #Split the version by the .
        #Build a new version, appending the unique GitHub run number to the end
        $newVersion = "$($splitVersion[0]).$($splitVersion[1]).${{ github.run_number }}"
        Write-Host "new version: " $newVersion
        #Save the new version back to the file
        echo "::set-env name=extensionVersion::$newVersion"
        $a.version = $newVersion
        $a | ConvertTo-Json | set-content $pathToJson
        Write-Host "New env variable " ${{ env.extensionVersion }}
    - name: Build extension
      run: |
        npm install -g tfx-cli
        tfx extension create --manifest-globs vss-extension.json --root DevOpsMetrics\DevOpsMetrics.AzureDevOpsExtension\bin\Release\netcoreapp3.1\publish\wwwroot --output-path DevOpsMetrics\DevOpsMetrics.AzureDevOpsExtension\bin\Release\netcoreapp3.1\publish\wwwroot  #--rev-version
        #tfx extension publish --help 
        #tfx extension publish --manifests "DevOpsMetrics\DevOpsMetrics.AzureDevOpsExtension\bin\Release\netcoreapp3.1\publish\wwwroot\SamSmithNZ.high-performing-devops-metrics-${{ env.extensionVersion }}.vsix" --token ${{ secrets.AzureDevOpsPATToken }}
#    - name: Check files
#      run: |
#        cd DevOpsMetrics\DevOpsMetrics.AzureDevOpsExtension\bin\Release\netcoreapp3.1\publish\wwwroot
#        dir
#        Write-Host "New env variable " ${{ env.extensionVersion }}
    - name: Upload Azure DevOps extension build artifacts back to GitHub
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: azuredevopsextensionpackage
        #path: DevOpsMetrics\DevOpsMetrics.AzureDevOpsExtension\bin\Release\netcoreapp3.1\publish\wwwroot\SamSmithNZ.high-performing-devops-metrics-${{ env.extensionVersion }}.vsix
        path: DevOpsMetrics\DevOpsMetrics.AzureDevOpsExtension\bin\Release\netcoreapp3.1\publish\wwwroot
    - name: publish extension
      run: |
        tfx extension publish --vsix "DevOpsMetrics\DevOpsMetrics.AzureDevOpsExtension\bin\Release\netcoreapp3.1\publish\wwwroot\SamSmithNZ.high-performing-devops-metrics-${{ env.extensionVersion }}.vsix" --auth-type pat --token "${{ secrets.AzureDevOpsPATToken }}" --trace-level debug
